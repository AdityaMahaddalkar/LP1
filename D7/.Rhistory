setwd("D:/Work/LP1/D7")
# Load data
train_data = read.csv('train.txt')
test_data = read.csv('test.txt')
library(tidyverse)
library(glmnet)
# Load data
train_data <- read.csv('train.txt')
test_data <- read.csv('test.txt')
install.packages(glmnet)
install.packages(glmnet)
install.packages('glmnet'')
''
install.packages('glmnet')
library(tidyverse)
library(glmnet)
# Load data
train_data <- read.csv('train.txt')
test_data <- read.csv('test.txt')
head(train)
train <- read.csv('train.txt')
test <- read.csv('test.txt')
head(train)
library(tidyverse)
library(glmnet)
# Load data
train <- read.csv('train.txt')
test <- read.csv('test.txt')
head(train)
test <- mutate(test, Item_Outlet_Sales = 0)
data <- rbind(train, test)
str(data)
library(tidyverse)
library(glmnet)
# Load data
train <- read.csv('train.txt')
test <- read.csv('test.txt')
head(train)
test <- mutate(test, Item_Outlet_Sales = 0)
data <- rbind(train, test)
str(data)
summary(data)
sapply(data[, 2:ncol(data)], levels)
sapply(data, function(x) sum(is.na(x)))
sapply(data, function(x) sum(x == ''))
item_type_na <- data %>%
group_by(Item_Type) %>%
filter(is.na(Item_Weight)) %>%
count()
ggplot(item_type_na, aes(Item_Type, n)) +
geom_bar(stat = "identity") +
theme(axis.test.x = element_text(angle=75, vjust=0.7))
library(tidyverse)
library(glmnet)
# Load data
train <- read.csv('train.txt')
test <- read.csv('test.txt')
head(train)
test <- mutate(test, Item_Outlet_Sales = 0)
data <- rbind(train, test)
str(data)
summary(data)
sapply(data[, 2:ncol(data)], levels)
sapply(data, function(x) sum(is.na(x)))
sapply(data, function(x) sum(x == ''))
item_type_na <- data %>%
group_by(Item_Type) %>%
filter(is.na(Item_Weight)) %>%
count()
ggplot(item_type_na, aes(Item_Type, n)) +
geom_bar(stat = "identity")
library(tidyverse)
library(glmnet)
# Load data
train <- read.csv('train.txt')
test <- read.csv('test.txt')
head(train)
test <- mutate(test, Item_Outlet_Sales = 0)
data <- rbind(train, test)
str(data)
summary(data)
sapply(data[, 2:ncol(data)], levels)
sapply(data, function(x) sum(is.na(x)))
sapply(data, function(x) sum(x == ''))
item_type_na <- data %>%
group_by(Item_Type) %>%
filter(is.na(Item_Weight)) %>%
count()
ggplot(item_type_na, aes(Item_Type, n)) +
geom_bar(stat = "identity")
impute_mean <- function(x) replace(x, is.na(x), mean(x, na.rm = T))
data <- data %>%
group_by(Item_Type) %>%
mutate(Item_Weight = impute_mean(Item_Weight))
data <- data %>%
mutate(Item_Fat_Content = replace(Item_Fat_Content, Item_Fat_Content == 'LF', 'Low Fat')) %>%
mutate(Item_Fat_Content = replace(Item_Fat_Content, Item_Fat_Content == 'low fat', 'Low Fat')) %>%
mutate(Item_Fat_Content = replace(Item_Fat_Content, Item_Fat_Content == 'reg', 'Regular')) %>%
droplevels()
ggplot(data, aes(Item_Visibility, Item_Outlet_Sales)) +
geom_point(size = 0.75)
zero_viz <- data %>%
filter(Item_Visibility == 0 & Item_Outlet_Sales > 0)
avg <- data %>%
summarize(mean(Item_Visibility))
data <- data %>%
mutate(Item_Visibility = replace(Item_Visibility, Item_Visibility == 0, mean(Item_Visibility))) %>%
mutate(Item_Visibility = as.double(Item_Visibility))
summary(data)
data <- data %>%
mutate(Years_Open = 2013 -Outlet_Establishment_Year)
data <- data[, c(1,2,3,4,5,6,7,13,9,10,11,12)]
data %>%
group_by(Outlet_Location_Type, Outlet_Type, Outlet_Size) %>%
count()
ggplot(data, aes(Outlet_Size, Outlet_Location_Type, color=Outlet_Type)) +
geom_point()
data <- data %>%
mutate(Outlet_Size = replace(Outlet_Size, Outlet_Size == '' & Outlet_Location_Type == 'Tier 2', 'Small')) %>%
mutate(Outlet_Size = replace(Outlet_Size, Outlet_Size == '' & Outlet_Location_Type == 'Tier 3', 'Medium'))
sapply(data, function(x) sum(x == ''))
data <- data %>%
separate(Item_Identifier, c('Item_Category', 'Item_Identifier'), sep=2)
sapply(data, function(x) n_distinct(x))
summary(data)
ggplot(data, aes(Item_Type, Item_Outlet_Sales)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=60, vjust=0.75))
ggplot(data, aes(Item_Type, Item_Visibility)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle=90, vjust=0.8))
ggplot(train, aes(Item_Visibility, Item_Outlet_Sales, color = Item_Type)) +
geom_point(size = 0.75)
mse <- function(x, y) {
mean((x - y)^2)
}
set.seed(1)
train <- data[1:8523,]
train_reg <- train
train_samp <- sample(1:nrow(train), nrow(train)*0.7)
test <- train[-train_samp,]
test <- test[,-c(2)]
train <- train[train_samp,]
train <- train[,-c(2)]
real_test <- data[8524:nrow(data),]
mean_sales <- mean(train$Item_Outlet_Sales)
base1 <- tibble(test$Outlet_Identifier, 'Item_Outlet_Sales' = mean_sales)
mse_base1 <- mse(base1[,2], test[,12])
cat('MSE of baseline model:', mse_base1)
store_lm <- lm(Item_Outlet_Sales~., train)
summary(store_lm)
plot(store_lm)
cat('Linear model MSE: ', mse_lm)
train_reg <- data[1:8523,]
grid <- 10^seq(10, -2, length=100)
mod_mat <- model.matrix(Item_Outlet_Sales~.-Item_Identifier,  train_reg)
train_reg <- mod_mat[train_samp,]
train_y <- train$Item_Outlet_Sales
test_reg <- mod_mat[-train_samp,]
test_y <- test$Item_Outlet_Sales
store_lasso <- glmnet(train_reg, train_y, lambda=grid)
plot(store_lasso)
store_lasso_cv <- cv.glmnet(train_reg, train_y)
plot(store_lasso_cv)
best_lam <- store_lasso_cv$lambda.min
cat('Best lambda is:', best_lam)
cvlasso_pred <- predict(store_lasso, s=best_lam, newx=test_reg)
cat('\nLasso regularizaion MSE:', mse(cvlasso_pred, test_y))
cv_lasso_coef <- predict(store_lasso, type='coefficients', s=best_lam)
cv_lasso_coef
cv_coef_mat <- summary(cv_lasso_coef)
cv_coef_df <- tibble(Factor = rownames(cv_lasso_coef)[cv_coef_mat$i],
Coefficient = cv_coef_mat$x) %>%
mutate(Factor = fct_reorder(Factor, Coefficient))
ggplot(cv_coef_df, aes(Factor, Coefficient)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=90, vjust=0.75))
neg <- cv_coef_df %>%
filter(Coefficient < 0) %>%
mutate(Coefficient = -1*Coefficient) %>%
mutate(Sign = as.factor('-'))
pos <- cv_coef_df %>%
filter(Coefficient > 0) %>%
mutate(Sign = as.factor('+'))
log_variable <- rbind(neg, pos) %>%
mutate(Factor = fct_reorder(Factor, Coefficient))
ggplot(log_variable, aes(Factor, Coefficient, fill=Sign)) +
geom_bar(stat='identity') +
scale_y_continuous(trans='log10') +
ylab('log(coefficient)') +
theme(axis.text.x = element_text(angle=90, vjust=0.75))
